/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { CacheableResponsePlugin } from 'workbox-cacheable-response';
import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { RangeRequestsPlugin } from 'workbox-range-requests';
import { registerRoute } from 'workbox-routing';
import { CacheFirst, NetworkFirst, StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// // Log requests for debugging
// registerRoute(
//   ({url, request, event}) => {
//     console.log(url.origin, url.pathname)
//     return false
//   },
//   new NetworkFirst({ cacheName: 'debug' })
// );


// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// font-awesome is not pre-cached automatically
precacheAndRoute([
  { url:"https://kit.fontawesome.com/99ea0adce1.js", revision: 1 }
])

// navigator?.storage?.persist() // requests that the browser not evict data from caches

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// Cache the bible memory media which is stored in google cloud storage, keeping a fixed number of most recent videos.
const firebaseStorageOrigin = "https://firebasestorage.googleapis.com"
const firebaseStoragePrefix = "/v0/b/bythebookthebible.appspot.com/o/memory"
registerRoute(
  ({url, request, event}) => url.origin === firebaseStorageOrigin && url.pathname.startsWith(firebaseStoragePrefix),

  new CacheFirst({
    cacheName: 'media',
    plugins: [
      // Will not composite partial requests into full request, must fetch whole file 
      // before making a range request! May be better config in the future.
      // <video> and <audio> generally make range requests (206) not full requests (200).
      new RangeRequestsPlugin(),
      new CacheableResponsePlugin({ statuses: [200] }),
      new ExpirationPlugin({ maxEntries: 40, purgeOnQuotaError: true }),
    ],
  })
);


// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});
